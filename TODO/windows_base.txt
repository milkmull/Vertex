TODO:

cmake test:
{
    x Define Vertex project
    x Generate windows .rc file
    x Configure output files for debug and release builds
    x Optimize in release build?
    x Install pdbs
    x Install cmake scrip
    x Installation
    x Define Sandbox project
    x Link Sandbox to Vertex, test both static and shared
    x Test including Vertex after installation
    x Test library
    - clang tidy, clang format
    - editorconfig
}

system:
{
    x platform dependent build config, macros for which library sections should be defined for each platform
    x Organize cmake
    x Install support
    x DLL support
    x Asserts and debugging system
    x dll load/unload
}

string:
{
    x Title
    x Test is_hex
    x Strip prefix/suffix
    x Join optional delimeter? any type?
    x Split characters
    x String similarity
    x Review to_int errors
    x Float parsing
    x format function
    x tests
}

filesystem:
{
    x file info
    x permissions (get or set file permissions)
    
    x directory iterator
    x recursive directory iterator
    
    x path manipulators (absolute, canonical, relative)
    x equivalent (are 2 paths the same?)
    x current path (get or set the current path)
    x get temp directory path
    x get user directory

    x copy operators
    x create operators
    x remove operators
    x rename operators
    x filesystem space
}

os and utils:
{
    x time (use std::chrono ?)
    
    x filesystem
    x file io
    
    x string
    x regex
    x format
    x iostream
    
    x time (get ticks, timer class)
    x locale (language, timezone, country)
    
    x thread, mutex, atomic wrapers

    x hash (MD5, SHA-1, SHA-256)
    x random (pcg, Mersenne Twister)
    x base64
    
    x process (argument parsing, environment variables, process dispatch, reading)
    x shell
    x power
    x memory
    x os info

    x update logger, profiler
    x assert and debug files
    x finalize test library
}

os revisions:
{
    x file use windows managed handle
    x investigate file from handle function placement
    x update library (dll) class, consider opening already loaded modules too, replace use in os::filesystem::get_temp_path
    - locale make lookup table to convert platform strings to enum values
}

cleanup and finalizaton for base library:
{
    final touches:
    {
        x refactor base64
        x move numeric string functions to inline
        x fix VX_API mismatch for time functions
        x finish marking VX_API functions in os
    }

    formatting:
    {
        x fix struct { enum {} } types
        x figure out when VX_API is needed and is not needed (destructors, inlines, etc.)
        x header guards
        x figure out platform includes
        x dummy os code
        x double check pragma once in all headers
        x no VX_API in platform code
        - optional compilation (crypto, some os modules)
        - macros to check if a particular os module is available
    }

    more bonus:
    {
        x add functions to shared_library
        x check which time_point functions using the standard library can be inlined with noexcept
        x look again at noexcept err::unavailable function
        x add iterator file::write overloads
        x staticly sized stack array
        x test path.pop_back()
    }
    
    refactoring platform specific code:
    {
        x test file read line
        x light path class
        - refactor io namespce and logging (allow logging to file or stdout)
        x swap methods
    }
}

filesystem tests:
{
    x get/set current path
    x temp directory
    x user folders

    x creation and info (file, directory, symlink, directory symlink, hard link)
    x get hard link count
    
    x last write time
    x file size

    x absolute
    x relative
    x equivalent
    x canonical

    x read symlink
    x update permissions

    x directory iterators
    
    x remove
    x create directories, remove_all
    x recursive directory iterator
    
    x copy file
    x copy symlink
    x copy
    
    x rename

    x space
    x is_empty
}

testing:
{
    x util/bit/bit
    x util/bit/endian
    
    x util/crypto/MD5
    x util/crypto/SHA1
    x util/crypto/SHA256
    
    x util/encode/base64

    x util/string/regex
    x util/string/string
    x util/string/string_cast
    x util/string/string_compare
    
    - os/random
    x util/random/algorithm
    x util/random/bernoulli_distribution
    x util/random/discrete_distribution
    x util/random/generate_canonical
    x util/random/normal_distribution
    x util/random/pcg
    x util/random/rng
    x util/random/uniform_int_distribution
    x util/random/uniform_real_distribution
    x random consistency tests
    
    x util/time/time
    x util/time/timer
    x util/time/datetime
    x os/time
    
    x os/file
    x os/filesystem
    x os/path
    
    x os/thread
    - os/mutex
    - os/atomic
    x os/process
    
    x os/system_info
    x os/locale
    x os/system_memory
    
    x os/shared_library
}

additional tests:
{
    - test thread local errors
    - test copy and move semantics for process, thread, file, shared library
}

finish base library:
{
    x formatting
    - test base library
    - document library
    x test cmake installation process (windows)
}