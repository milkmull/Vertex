#pragma once

#include "vertex/system/error.hpp"
#include "vertex/os/random.hpp"
#include "vertex/util/random/pcg.hpp"
#include "vertex/util/random/uniform_int_distribution.hpp"
#include "vertex/util/random/uniform_real_distribution.hpp"
#include "vertex/util/random/bernoulli_distribution.hpp"

namespace vx {
namespace random {

/**
 * @brief A basic random number generator (RNG) wrapper.
 *
 * This class wraps around an RNG (such as PCG) and provides various methods
 * for generating random numbers, including integers, floating-point values,
 * and boolean values. It also supports seeding and re-seeding the RNG.
 *
 * @tparam RNG The type of the random number generator used.
 */
template <typename RNG>
class basic_rng
{
public:

    /** The type of the generator used. */
    using generator_type = RNG;

    /** The result type of the random number generator (e.g., uint32_t). */
    using result_type = typename generator_type::result_type;

    /**
     * @brief Gets the minimum value that can be generated by the RNG.
     *
     * @return The minimum value of the generator.
     */
    static constexpr result_type min() noexcept { return generator_type::min(); }

    /**
     * @brief Gets the maximum value that can be generated by the RNG.
     *
     * @return The maximum value of the generator.
     */
    static constexpr result_type max() noexcept { return generator_type::max(); }

public:

    /**
     * @brief Default constructor that seeds the RNG using system entropy.
     */
    basic_rng() { seed(); }

    /**
     * @brief Constructs the RNG with a given seed.
     *
     * @param seed The seed value for the RNG.
     */
    basic_rng(uint32_t seed) { m_rng.seed(seed); }

    ////////////////////////////////////////////////////////////////////////////////
    // seeding
    ////////////////////////////////////////////////////////////////////////////////

    /**
     * @brief Seeds the RNG with a given 64-bit seed value.
     *
     * @param seed The seed value to initialize the RNG.
     */
    void seed(uint64_t seed)
    {
        m_rng.seed(seed);
    }

    /**
     * @brief Seeds the RNG using system entropy and returns the used seed.
     *
     * This method attempts to gather entropy from the operating system.
     * If entropy cannot be retrieved, it uses the default seed for the RNG.
     *
     * @return The seed value used to initialize the RNG.
     */
    uint64_t seed()
    {
        uint64_t s = 0;

        if (!os::get_entropy(reinterpret_cast<uint8_t*>(&s), sizeof(s)))
        {
            err::clear();
            s = decltype(m_rng)::default_seed;
        }

        seed(s);
        return s;
    }

    /**
     * @brief Gets a reference to the underlying random number generator.
     *
     * @return A reference to the underlying RNG.
     */
    generator_type& use_generator() noexcept
    {
        return m_rng;
    }

    ////////////////////////////////////////////////////////////////////////////////
    // generators
    ////////////////////////////////////////////////////////////////////////////////

    /**
     * @brief Generates a random 32-bit unsigned integer.
     *
     * @return A random 32-bit unsigned integer.
     */
    uint32_t operator()()
    {
        return m_rng();
    }

    /**
     * @brief Generates a random 32-bit unsigned integer.
     *
     * Alias for `operator()`.
     *
     * @return A random 32-bit unsigned integer.
     */
    uint32_t randi()
    {
        return operator()();
    }

    /**
     * @brief Generates a random floating-point number in the range [0.0, 1.0).
     *
     * @return A random floating-point number between 0.0 and 1.0.
     */
    float randf()
    {
        return random::uniform_real_distribution<float>()(m_rng);
    }

    /**
     * @brief Generates a random boolean value.
     *
     * @return A random boolean value (true or false).
     */
    bool randb()
    {
        return random::bernoulli_distribution()(m_rng);
    }

    /**
     * @brief Generates a random integer within a specified range [min, max].
     *
     * @tparam T The type of the random number (must be integral).
     * @param min The minimum value of the range.
     * @param max The maximum value of the range.
     * @return A random integer within the range [min, max].
     */
    template <typename T = uint32_t>
    T randi_range(T min, T max)
    {
        return random::uniform_int_distribution<T>(min, max)(m_rng);
    }

    /**
     * @brief Generates a random floating-point number within a specified range [min, max].
     *
     * @tparam T The type of the random number (must be floating-point).
     * @param min The minimum value of the range.
     * @param max The maximum value of the range.
     * @return A random floating-point number within the range [min, max].
     */
    template <typename T = float>
    T randf_range(T min, T max)
    {
        return random::uniform_real_distribution<T>(min, max)(m_rng);
    }

    /**
     * @brief Generates a random ASCII character in the printable range [32, 126].
     *
     * @return A random ASCII character in the printable range.
     */
    char ascii()
    {
        return randi_range<char>(32, 126);
    }

private:

    generator_type m_rng;
};


/**
 * @brief Alias for a basic RNG using the PCG32 generator.
 */
using rng = basic_rng<pcg32>;

} // namespace random
} // namespace vx