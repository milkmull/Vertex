#pragma once

#include "vertex/config/language_config.hpp"
#include "vertex/os/shared_library.hpp"

#if VX_HAS_INCLUDE(<gameinput.h>)
#   define HAVE_GAMEINPUT_H 1
#endif

#if HAVE_GAMEINPUT_H

#include <gameinput.h>

#if !defined(GAMEINPUT_API_VERSION)
#   define GAMEINPUT_API_VERSION 0
#endif

#if GAMEINPUT_API_VERSION == 2
using namespace GameInput::v2;
#elif GAMEINPUT_API_VERSION == 1
using namespace GameInput::v1;
#endif

namespace vx {
namespace app {

namespace video { class video_instance; }

namespace input {

///////////////////////////////////////////////////////////////////////////////
// data
///////////////////////////////////////////////////////////////////////////////

struct game_input_data
{
    os::shared_library game_input_dll;
    IGameInput* ctx = nullptr;
};

///////////////////////////////////////////////////////////////////////////////
// manager
///////////////////////////////////////////////////////////////////////////////

class game_input_manager
{
public:

    ///////////////////////////////////////////////////////////////////////////////
    // iitialization
    ///////////////////////////////////////////////////////////////////////////////

    bool init(video::video_instance* owner);
    void quit();

    ///////////////////////////////////////////////////////////////////////////////
    // update
    ///////////////////////////////////////////////////////////////////////////////

    bool update_enabled();
    bool update();

    ///////////////////////////////////////////////////////////////////////////////
    // data
    ///////////////////////////////////////////////////////////////////////////////

    video::video_instance* video = nullptr;
    game_input_data data;
};

} // namespace input
} // namespace app
} // namespace vx

#endif // HAVE_GAMEINPUT_H