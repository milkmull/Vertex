#pragma once

#include "vertex/os/handle.hpp"
#include "vertex/os/thread.hpp"
#include "vertex_impl/os/_platform/windows/windows_tools.hpp"

namespace vx {
namespace app {

namespace video { class video_instance; }

namespace input {

///////////////////////////////////////////////////////////////////////////////
// flags
///////////////////////////////////////////////////////////////////////////////

struct raw_input_flags
{
    using type = int;

    enum : type
    {
        NONE = 0,
        ENABLE_RAW_MOUSE_INPUT = (1 << 0),
        ENABLE_RAW_KEYBOARD_INPUT = (1 << 1)
    };
};

///////////////////////////////////////////////////////////////////////////////
// thread data
///////////////////////////////////////////////////////////////////////////////

struct raw_input_thread_data
{
    typename raw_input_flags::type flags = raw_input_flags::NONE;

    bool done = false;
    os::handle ready_event;
    os::handle done_event;
    os::thread thread;
};

///////////////////////////////////////////////////////////////////////////////
// data
///////////////////////////////////////////////////////////////////////////////

struct raw_input_data
{
    typename raw_input_flags::type flags = raw_input_flags::NONE;

    bool raw_mouse_enabled = false;
    bool raw_keyboard_enabled = false;

    time::time_point last_raw_input_poll;
    raw_input_thread_data thread_data;

    size_t raw_input_offset = 0;
    std::vector<BYTE> raw_input;
};

///////////////////////////////////////////////////////////////////////////////
// manager
///////////////////////////////////////////////////////////////////////////////

class raw_input_manager
{
public:

    ///////////////////////////////////////////////////////////////////////////////
    // iitialization
    ///////////////////////////////////////////////////////////////////////////////

    bool init(video::video_instance* owner);
    void quit();

    ///////////////////////////////////////////////////////////////////////////////
    // thread
    ///////////////////////////////////////////////////////////////////////////////

    void reset_thread();
    bool start_thread(typename raw_input_flags::type flags);
    void thread();

    ///////////////////////////////////////////////////////////////////////////////
    // configure
    ///////////////////////////////////////////////////////////////////////////////

    bool set_raw_input_enabled(typename raw_input_flags::type flags);
    bool update_raw_input_enabled();

    bool set_raw_mouse_enabled(bool enabled);
    bool set_raw_keyboard_enabled(bool enabled);

    ///////////////////////////////////////////////////////////////////////////////
    // processing
    ///////////////////////////////////////////////////////////////////////////////

    void handle_raw_mouse_input(time::time_point t, os::handle device_handle, RAWMOUSE* raw);
    void handle_raw_keyboard_input(time::time_point t, os::handle device_handle, RAWKEYBOARD* raw);

    void poll(time::time_point start_time);

    ///////////////////////////////////////////////////////////////////////////////
    // data
    ///////////////////////////////////////////////////////////////////////////////

    video::video_instance* video = nullptr;
    raw_input_data data;
};

} // namespace input
} // namespace app
} // namespace vx