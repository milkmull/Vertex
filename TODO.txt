TODO:

cmake test:
{
    x Define Vertex project
    x Generate windows .rc file
    x Configure output files for debug and release builds
    x Optimize in release build?
    x Install pdbs
    x Install cmake scrip
    x Installation
    x Define Sandbox project
    x Link Sandbox to Vertex, test both static and shared
    x Test including Vertex after installation
    x Test library
}

cmake:
{
    x Define Vertex project
    x Generate windows .rc file
    x Configure output files for debug and release builds
    x Optimize in release build?
    - Installation
    x Define Sandbox project
    x Link Sandbox to Vertex, test both static and shared
    - clang tidy, clang format
    - editorconfig
    x Test library
}

system:
{
    - platform dependant build config, macros for which library sections should be defined for each platform
    x Organize cmake
    x Install support
    x DLL support
    x Asserts and debugging system
    x dll load/unload
}

string:
{
    x Title
    x Test is_hex
    x Strip prefix/suffix
    x Join optional delimeter? any type?
    x Split characters
    x String similarity
    x Review to_int errors
    x Float parsing
    x format function
    - tests
}

filesystem:
{
    x file info
    x permissions (get or set file permissions)
    
    x directory iterator
    x recursive directory iterator
    
    x path manipulators (absolute, canonical, relative)
    x equivalent (are 2 paths the same?)
    x current path (get or set the current path)
    x get temp directory path
    x get user directory

    x copy operators
    x create operators
    x remove operators
    x rename operators
}

std:
{
    x time (use std::chrono ?)
    
    x filesystem
    x file io
    
    x string
    x regex
    x format
    x iostream
    
    x time (get ticks, timer class)
    x locale (language, timezone, country)
    
    x thread, mutex, atomic wrapers

    x hash (MD5, SHA-1, SHA-256)
    x random (pcg, Mersenne Twister)
    x base64
    
    x process (argument parsing, environment variables, process dispatch, reading)
    x shell
    x power
    x memory
    x os info

    x update logger, profiler
    x assert and debug files
    - finalize test library
}

os revisions:
{
    x file use windows managed handle
    x investigate file from handle function placement
    x update library (dll) class, consider opening already loaded modules too, replace use in os::filesystem::get_temp_path
    - locale make lookup table to convert platform strings to enum values
}

final touches:
{
    x refactor base64
    x move numeric string functions to inline
    x fix VX_API mismatch for time functions
    x finish marking VX_API functions in os
}

formatting:
{
    x fix struct { enum {} } types
    - figure out when VX_API is needed and is not needed (destructors, inlines, etc.)
    x header guards
    - figure out platform includes
    - build config for platform
    - dummy os code
}

finish std:
{
    - formatting
    - test and document stdlib
    - test cmake installation process
}

math:
{
    - simd instructions
    - reorganize, impliment simd where appropriate
    - collision matrix
}

pixel:
{
    - templated image types using pixel format
    - finish removing dead code from stb image files
    - clean up image and pixel libraries
    - move color to pixel library?
    - better error reporting
    - logo break :)
    - documentation break
    - Bresenham's line algorithm for line drawing
    - other drawings (circle, rect, etc.)
}

app:
{
    - main function
    - message box
    - consider INVALID_HANDLE_VALUE for window and other objects that use handles
    - finish safety proofing functions and pointers
    - finish mouse implimentation
    - add keyboard
    - add touch support
    - pen support?
    - add clipboard support
    - add drag and drop support for windows
    - event test break, go over all features and test
    - add raw input handling
    - add file dialogue support
}

renderer:
{
    - add support for renderer backend (opengl, opengles, vulkan)
    
    - shaders
    - vertex buffer
    - index buffer
    - frame buffer
}

bonus:
{
    - add support for haptic, sensors
    - add support for joysticks, gamepad
    - camera support
    - networking (SDL_net as reference)
    - HTTP, url, ftp support
    - Font loading (freetype)
    - Audio subsystem
    - JSON
}

